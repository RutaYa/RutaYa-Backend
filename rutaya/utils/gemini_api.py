import google.generativeai as genai
from rutaya.models import Favorite, TravelAvailability, Destination, User

from rutaya.utils.config import GOOGLE_API_KEY

genai.configure(api_key=GOOGLE_API_KEY)


import google.generativeai as genai
from rutaya.utils.config import GOOGLE_API_KEY

genai.configure(api_key=GOOGLE_API_KEY)

def send_message(data):
    user_id = data.get("userId")
    current_message = data.get("currentMessage")
    previous_messages = data.get("previousMessages", [])
    memory_bank = data.get("memoryBank", {})

    # Obtener usuario
    user = User.objects.get(id=user_id)

    # Obtener favoritos
    favorite_destinations = Favorite.objects.filter(user=user).select_related('destination')
    favorite_names = [f"{fav.destination.name} - {fav.destination.location}" for fav in favorite_destinations]

    # Obtener disponibilidad
    availability_dates = TravelAvailability.objects.filter(user=user).values_list('date', flat=True)

    # Construir el prompt
    prompt = """
        Eres un asistente virtual de la aplicaci√≥n RutasYa!, especializada en recomendar paquetes tur√≠sticos dentro del Per√∫. 
        Utiliza las preferencias del usuario, sus destinos favoritos y sus fechas disponibles para sugerir rutas personalizadas. 
        No le ofrezcas los paquetes a menos que el usuario te lo pida, no lo presiones, d√©jalo preguntar, no menciones directamente que tienes sus datos o preferencias pero siempre realiza una reconfirmacion de la cantidad de personas y de sus preferencias antes de generar un paquete.

        Tus respuestas deben ser √∫tiles, breves y atractivas. Evita p√°rrafos largos (m√°ximo 100 palabras cuando sea necesario, normalmente 20 palabras).
        Mientras conversas sobre el posible destino, presenta sugerencias de lugares cercanos dependiendo de la cantidad de d√≠as que se vaya a viajar.

        IMPORTANTE: Si el usuario te dice que ya puedes generar el paquete de viaje, entonces responder√°s en formato JSON con los siguientes campos:
        - title: T√≠tulo atractivo del paquete
        - description: Descripci√≥n general del viaje
        - start_date: YYYY-MM-DDTHH:MM
        - days: N√∫mero de d√≠as del viaje
        - quantity: N√∫mero de personas
        - price: Precio total en soles peruanos
        - itinerary: Lista de actividades detalladas por fecha y hora

        El itinerario debe seguir esta estructura:
        [
          {
            "datetime": YYYY-MM-DDTHH:MM,
            "description": "Salida desde Lima hacia Cusco - Vuelo de ma√±ana"
          },
          {
            "datetime": YYYY-MM-DDTHH:MM,
            "description": "Llegada a Cusco - Check-in hotel y almuerzo"
          },
          {
            "datetime": YYYY-MM-DDTHH:MM,
            "description": "City tour por el centro hist√≥rico de Cusco"
          }
        ]
        
        ES IMPORTANTE QUE LAS FECHAS SEAN EN YYYY-MM-DDTHH:MM,

        REGLAS PARA EL ITINERARIO:
        - Para viajes de 1-2 d√≠as: Itinerario detallado por hora
        - Para viajes de 3-5 d√≠as: Itinerario por bloques de tiempo (ma√±ana, tarde, noche)
        - Para viajes de 6+ d√≠as: Itinerario por d√≠as con actividades principales
        - Siempre incluye m√∫ltiples destinos cercanos seg√∫n los d√≠as disponibles
        - Considera tiempo de traslados entre destinos
        - Incluye comidas, descansos y actividades culturales/naturales
        - Mant√©n un flujo l√≥gico geogr√°fico para optimizar el recorrido

        Ejemplo de destinos cercanos por regi√≥n:
        - Cusco: Machu Picchu, Valle Sagrado, Ollantaytambo, Pisac
        - Lima: Pachacamac, Barranco, Miraflores, Callao
        - Arequipa: Colca, Chivay, Yanahuara, Saband√≠a
        - Trujillo: Huacas del Sol y Luna, Chan Chan, Huanchaco
        """;

    # Agregar preferencias del usuario
    if memory_bank:
        prompt += "\n\nüß† *Preferencias del usuario:*\n"
        for key, value in memory_bank.items():
            if value:
                formatted_key = key.replace("_", " ").capitalize()
                prompt += f"- {formatted_key}: {value}\n"
    else:
        prompt += "\n\nüß† *Preferencias del usuario:* No registradas.\n"

    # Agregar favoritos
    if favorite_names:
        prompt += "\nüåü *Destinos favoritos del usuario:*\n"
        for fav in favorite_names:
            prompt += f"- {fav}\n"
    else:
        prompt += "\nüåü *Destinos favoritos del usuario:* Ninguno a√∫n.\n"

    # Agregar disponibilidad
    if availability_dates:
        prompt += "\nüìÖ *Fechas disponibles para viajar:*\n"
        for date in availability_dates:
            prompt += f"- {date}\n"
    else:
        prompt += "\nüìÖ *Fechas disponibles para viajar:* No registradas.\n"

    # Conversaci√≥n previa
    if previous_messages:
        prompt += "\nüí¨ *Conversaci√≥n previa:*\n"
        for msg in previous_messages:
            role = "Bot" if msg.get("isBot") else "Usuario"
            prompt += f"{role}: {msg.get('message')}\n"

    # Mensaje actual
    prompt += f"\nüßç Usuario: {current_message}\nü§ñ Bot:"

    # Enviar a Gemini
    model = genai.GenerativeModel('gemini-1.5-flash')
    response = model.generate_content(prompt)

    return response.text.strip()
